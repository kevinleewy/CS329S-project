{"version":3,"sources":["Card.js","CardStack.js","SwipableCards.js","index.js"],"names":["StyledCard","styled","motion","div","Card","children","onVote","style","props","cardElem","useRef","x","useMotionValue","controls","useAnimation","useState","constrained","setConstrained","direction","setDirection","velocity","setVelocity","useEffect","unsubscribeX","onChange","result","childNode","parentNode","childRect","getBoundingClientRect","parentRect","left","right","undefined","getVote","current","animate","dragConstraints","top","bottom","dragElastic","ref","onDrag","getVelocity","onDragEnd","min","Math","abs","start","parentWidth","width","childWidth","flyAwayDistance","whileTap","scale","Frame","CardStackWrapper","Children","toArray","stack","setStack","console","log","handleVote","item","vote","array","newStack","filter","_","index","length","map","isTop","drag","disabled","key","CardItem","rotation","random","CardImage","img","withStreamlitConnection","Streamlit","setFrameHeight","renderData","useRenderData","isFocused","imgs","args","last_card_emoji","theme","borderStyling","primaryColor","border","outline","id","setComponentValue","data-value","fontSize","color","src","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.454c51d4.chunk.js","sourcesContent":["// Reference: https://codesandbox.io/s/tinder-style-swipe-framer-motion-cq3f6\nimport React, { useRef, useEffect, useState } from \"react\"\nimport { motion, useMotionValue, useAnimation } from \"framer-motion\"\nimport styled from \"styled-components\"\n\nconst StyledCard = styled(motion.div)`\n  position: absolute;\n`\n\nexport const Card = ({ children, style, onVote, ...props }) => {\n  const cardElem = useRef(null)\n  const x = useMotionValue(0)\n  const controls = useAnimation()\n\n  const [constrained, setConstrained] = useState(true)\n  const [direction, setDirection] = useState()\n  const [velocity, setVelocity] = useState(0)\n\n  const getVote = (childNode, parentNode) => {\n    const childRect = childNode.getBoundingClientRect()\n    const parentRect = parentNode.getBoundingClientRect()\n    let result =\n      parentRect.left >= childRect.right\n        ? false\n        : parentRect.right <= childRect.left\n        ? true\n        : undefined\n    return result\n  }\n\n  // determine direction of swipe based on velocity\n  const getDirection = () => {\n    return velocity >= 1 ? \"right\" : velocity <= -1 ? \"left\" : undefined\n  }\n\n  const getTrajectory = () => {\n    setVelocity(x.getVelocity())\n    setDirection(getDirection())\n  }\n\n  const flyAway = (min) => {\n    const flyAwayDistance = (direction) => {\n      const parentWidth = cardElem.current.parentNode.getBoundingClientRect()\n        .width\n      const childWidth = cardElem.current.getBoundingClientRect().width\n      return direction === \"left\"\n        ? -parentWidth / 2 - childWidth / 2\n        : parentWidth / 2 + childWidth / 2\n    }\n\n    if (direction && Math.abs(velocity) > min) {\n      setConstrained(false)\n      controls.start({\n        x: flyAwayDistance(direction)\n      })\n    }\n  }\n\n  useEffect(() => {\n    const unsubscribeX = x.onChange(() => {\n      const childNode = cardElem.current\n      const parentNode = cardElem.current.parentNode\n      const result = getVote(childNode, parentNode)\n      result !== undefined && onVote(result)\n    })\n\n    return () => unsubscribeX()\n  })\n\n  return (\n    <StyledCard\n      animate={controls}\n      dragConstraints={constrained && { left: 0, right: 0, top: 0, bottom: 0 }}\n      dragElastic={1}\n      ref={cardElem}\n      style={{ x }}\n      onDrag={getTrajectory}\n      onDragEnd={() => flyAway(500)}\n      whileTap={{ scale: 1.1 }}\n      {...props}\n    >\n      {children}\n    </StyledCard>\n  )\n}\n","// Reference: https://codesandbox.io/s/tinder-style-swipe-framer-motion-cq3f6\nimport React, { useState, Children } from \"react\"\nimport styled from \"styled-components\"\n\nimport { Card } from \"./Card\"\n\nconst Frame = styled.div`\n  width: 100%;\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`\n\nexport const CardStack = ({ onVote, children, ...props }) => {\n  const [stack, setStack] = useState(Children.toArray(children))\n\n  // return new array with last item removed\n  const pop = (array) => {\n    return array.filter((_, index) => {\n      return index < array.length - 1\n    })\n  }\n  console.log(props);\n\n  const handleVote = (item, vote) => {\n    // update the stack\n    let newStack = pop(stack)\n    setStack(newStack)\n\n    // run function from onVote prop, passing the current item and value of vote\n    onVote(item, vote)\n  }\n\n  return (\n    <>\n      <Frame {...props}>\n        {stack.map((item, index) => {\n          let isTop = index === stack.length - 1\n          return (\n            <Card\n              drag={isTop && !item.props?.disabled} // Only top card is draggable\n              key={item.key || index}\n              onVote={(result) => handleVote(item, result)}\n            >\n              {item}\n            </Card>\n          )\n        })}\n      </Frame>\n    </>\n  )\n}\n","// Reference: https://codesandbox.io/s/tinder-style-swipe-framer-motion-cq3f6\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\"\nimport React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\nimport { CardStack } from \"./CardStack\"\n\nconst CardStackWrapper = styled(CardStack)`\n  // background: #1f2937;\n`\n\nconst CardItem = styled.div`\n  background: #f9fafb;\n  width: 300px;\n  height: 400px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  font-size: 150px;\n  text-shadow: 0 10px 10px #d1d5db;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);\n  border-radius: 8px;\n  \n  transform: ${() => {\n    let rotation = Math.random() * (5 - -5) + -5\n    return `rotate(${rotation}deg)`\n  }};\n  \n  overflow: hidden;\n  pointer-events: none;\n\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Old versions of Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome, Edge, Opera and Firefox */\n`\n\nconst CardImage = styled.img`\n  position: absolute;\n  height: 100%;\n  pointer-events: none;\n`\n\nexport const SwipableCards = () => {\n  Streamlit.setFrameHeight(500)\n\n  const renderData = useRenderData()\n\n  const [isFocused, setIsFocused] = useState(false)\n\n  const onVote = (item, vote) => {\n    console.log(item.props, vote);\n    Streamlit.setComponentValue(vote);\n  }\n\n  const imgs = renderData.args[\"imgs\"]\n  const last_card_emoji = renderData.args[\"last_card_emoji\"] || \"ðŸ™ˆ\"\n\n  const theme = renderData.theme\n  const style = {}\n  if (theme) {\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\n    style.border = borderStyling\n    style.outline = borderStyling\n  }\n\n  return (\n    <div id=\"SwipableCards\">\n      <CardStackWrapper onVote={onVote}>\n        <CardItem data-value=\"pancakes\" disabled>\n          {last_card_emoji}\n          <div style={{ fontSize: \"25px\", color: \"black\" }}>\n            That's all for now!\n          </div>\n        </CardItem>\n        {imgs.map((img, index) => {\n          return (\n            <CardItem data-value=\"waffles\" whileTap={{ scale: 1.15 }}>\n              <CardImage src={img} width=\"100%\" height=\"100%\" />\n            </CardItem>\n          )\n        })}\n      </CardStackWrapper>\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(SwipableCards)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\"\nimport SwipableCards from \"./SwipableCards\"\nimport \"./styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <SwipableCards />\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}